<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yunzhe.me</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yunzhexu.github.io/"/>
  <updated>2017-11-14T04:00:01.143Z</updated>
  <id>http://yunzhexu.github.io/</id>
  
  <author>
    <name>Yunzhe Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sentiment Analysis by Python SentiWordNet</title>
    <link href="http://yunzhexu.github.io/2017/10/13/Sentiment-Analysis/"/>
    <id>http://yunzhexu.github.io/2017/10/13/Sentiment-Analysis/</id>
    <published>2017-10-13T23:57:22.000Z</published>
    <updated>2017-11-14T04:00:01.143Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://paxcom.net/wp-content/uploads/2016/09/Words.png" alt="sentiment analysis"><br><br></p><h1 id="Package-Needed"><a href="#Package-Needed" class="headerlink" title="Package Needed"></a>Package Needed</h1><p>If you don’t have installed the nltk in your python environment, just do this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install nltk</div></pre></td></tr></table></figure><p>Use 2 packages for the work.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> sentiwordnet <span class="keyword">as</span> swn</div><div class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> wordnet <span class="keyword">as</span> wn</div></pre></td></tr></table></figure></p><h1 id="Get-Synsets-of-A-Word"><a href="#Get-Synsets-of-A-Word" class="headerlink" title="Get Synsets of A Word"></a>Get Synsets of A Word</h1><p>You can get a list of the synsets for any given word by doing this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">word = <span class="string">'like'</span></div><div class="line">syn = wn.synsets(word)</div><div class="line"><span class="keyword">print</span> (syn)</div></pre></td></tr></table></figure><p>The result wil be:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Synset(<span class="string">'like.n.01'</span>), Synset(<span class="string">'like.n.02'</span>), Synset(<span class="string">'wish.v.02'</span>), Synset(<span class="string">'like.v.02'</span>), Synset(<span class="string">'like.v.03'</span>), Synset(<span class="string">'like.v.04'</span>), Synset(<span class="string">'like.v.05'</span>), Synset(<span class="string">'like.a.01'</span>), Synset(<span class="string">'like.a.02'</span>), Synset(<span class="string">'alike.a.01'</span>), Synset(<span class="string">'comparable.s.02'</span>)]</div></pre></td></tr></table></figure><a id="more"></a><p>Try another word:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">word = <span class="string">'disbelieve'</span></div><div class="line">syn = wn.synsets(word)</div><div class="line"><span class="keyword">print</span> (syn)</div></pre></td></tr></table></figure><p>Result:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Synset(<span class="string">'disbelieve.v.01'</span>)]</div></pre></td></tr></table></figure><p>For some words the result will be empty:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">word=<span class="string">'could'</span></div><div class="line">syn = wn.synsets(word)</div><div class="line"><span class="keyword">print</span> (syn)</div></pre></td></tr></table></figure><p>Result:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[]</div></pre></td></tr></table></figure><p>So if you want to process a list of words, you’d better check for the empty case.</p><h1 id="Get-Sentiment"><a href="#Get-Sentiment" class="headerlink" title="Get Sentiment"></a>Get Sentiment</h1><p>Use the word ‘disbelieve’ as the example.</p><p>We just get the synsets of it, it’s [Synset(‘disbelieve.v.01’)]. We need to use {disbelieve.v.01} as an input for the senti_synset() function.</p><p>You can use the syn[0] as a default input when processing a list of words.</p><p>Here is how to access the nltk/wordnet Synset object:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#word = 'disbelieve'</span></div><div class="line"><span class="comment">#syn = wn.synsets(word)</span></div><div class="line"></div><div class="line">s = str(syn[<span class="number">0</span>])[<span class="number">8</span>:<span class="number">-2</span>] </div><div class="line"><span class="keyword">print</span> (s)</div></pre></td></tr></table></figure><p>Another way, but you might get a list of lemmas:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s = syn[<span class="number">0</span>].lemma_names()</div></pre></td></tr></table></figure><p>Just go for sentiment analysis now!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#word = 'disbelieve'</span></div><div class="line"><span class="comment">#syn = wn.synsets(word)</span></div><div class="line"><span class="comment">#print (syn)</span></div><div class="line"></div><div class="line"><span class="comment">#s = str(syn[0])[8:-2] </span></div><div class="line"><span class="comment">#print (s)</span></div><div class="line"></div><div class="line">res = swn.senti_synset(s)</div><div class="line"><span class="keyword">print</span> (res)</div></pre></td></tr></table></figure><p>Result:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;disbelieve.v<span class="number">.01</span>: PosScore=<span class="number">0.0</span> NegScore=<span class="number">0.5</span>&gt;</div></pre></td></tr></table></figure><p>We can see the PosScore and NegScore for a word now.</p><p>If you just want the scores for comparing.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pos = res.pos_score()</div><div class="line">neg = res.neg_score()</div><div class="line"><span class="keyword">print</span> (pos)</div><div class="line"><span class="keyword">print</span> (neg)</div></pre></td></tr></table></figure><p>Result:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="string">'pos_score: '</span>, <span class="number">0.0</span>)</div><div class="line">(<span class="string">'neg_score: '</span>, <span class="number">0.5</span>)</div></pre></td></tr></table></figure><p>Then you can save them in a words set like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> res.pos_score() &gt; <span class="number">0</span> <span class="keyword">and</span> res.pos_score() &gt; res.neg_score():</div><div class="line">    pos_words.append(word)</div><div class="line"><span class="keyword">elif</span> res.neg_score() &gt; <span class="number">0</span> <span class="keyword">and</span> res.pos_score() &lt; res.neg_score():</div><div class="line">    neg_words.append(word)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    non_words.append(word)</div></pre></td></tr></table></figure><h1 id="Positive-and-Negative-Words-in-News-Titles"><a href="#Positive-and-Negative-Words-in-News-Titles" class="headerlink" title="Positive and Negative Words in News Titles"></a>Positive and Negative Words in News Titles</h1><p>Here are some top words I collected from new titles.</p><p><img src="https://imgur.com/LqlfvhA.png" alt=""><br><img src="https://i.imgur.com/ceFER33.png" alt=""></p><p>It is recommended to do normalization works like Stemming &amp; Lemmatization before you start your sentiment analysis. It may help improve the accuracy.</p><p>By the way, this is just a simple way for sentiment analysis. You may not get the accuracy as you expected.</p><p>For further method, you can try using CNN  (Convolutionary Neural Networks) for Sentiment Analysis. I may write another blog about it later. </p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://www.nltk.org/howto/sentiwordnet.html" target="_blank" rel="external">SentiWordNet Interface</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://paxcom.net/wp-content/uploads/2016/09/Words.png&quot; alt=&quot;sentiment analysis&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;Package-Needed&quot;&gt;&lt;a href=&quot;#Package-Needed&quot; class=&quot;headerlink&quot; title=&quot;Package Needed&quot;&gt;&lt;/a&gt;Package Needed&lt;/h1&gt;&lt;p&gt;If you don’t have installed the nltk in your python environment, just do this:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install nltk&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Use 2 packages for the work.&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; nltk.corpus &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sentiwordnet &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; swn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; nltk.corpus &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; wordnet &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; wn&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Get-Synsets-of-A-Word&quot;&gt;&lt;a href=&quot;#Get-Synsets-of-A-Word&quot; class=&quot;headerlink&quot; title=&quot;Get Synsets of A Word&quot;&gt;&lt;/a&gt;Get Synsets of A Word&lt;/h1&gt;&lt;p&gt;You can get a list of the synsets for any given word by doing this:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;word = &lt;span class=&quot;string&quot;&gt;&#39;like&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;syn = wn.synsets(word)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (syn)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The result wil be:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[Synset(&lt;span class=&quot;string&quot;&gt;&#39;like.n.01&#39;&lt;/span&gt;), Synset(&lt;span class=&quot;string&quot;&gt;&#39;like.n.02&#39;&lt;/span&gt;), Synset(&lt;span class=&quot;string&quot;&gt;&#39;wish.v.02&#39;&lt;/span&gt;), Synset(&lt;span class=&quot;string&quot;&gt;&#39;like.v.02&#39;&lt;/span&gt;), Synset(&lt;span class=&quot;string&quot;&gt;&#39;like.v.03&#39;&lt;/span&gt;), Synset(&lt;span class=&quot;string&quot;&gt;&#39;like.v.04&#39;&lt;/span&gt;), Synset(&lt;span class=&quot;string&quot;&gt;&#39;like.v.05&#39;&lt;/span&gt;), Synset(&lt;span class=&quot;string&quot;&gt;&#39;like.a.01&#39;&lt;/span&gt;), Synset(&lt;span class=&quot;string&quot;&gt;&#39;like.a.02&#39;&lt;/span&gt;), Synset(&lt;span class=&quot;string&quot;&gt;&#39;alike.a.01&#39;&lt;/span&gt;), Synset(&lt;span class=&quot;string&quot;&gt;&#39;comparable.s.02&#39;&lt;/span&gt;)]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Python, NLP" scheme="http://yunzhexu.github.io/tags/Python-NLP/"/>
    
  </entry>
  
  <entry>
    <title>ES7 Async/Await</title>
    <link href="http://yunzhexu.github.io/2017/10/01/ES7-Async-Await/"/>
    <id>http://yunzhexu.github.io/2017/10/01/ES7-Async-Await/</id>
    <published>2017-10-02T00:14:35.000Z</published>
    <updated>2017-11-14T03:56:30.278Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://coligo.io/javascript-async-await/cover-850x416.jpg" alt="async/await"><br><br><br>I will write something about it later.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://coligo.io/javascript-async-await/cover-850x416.jpg&quot; alt=&quot;async/await&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;I will write something about it later
      
    
    </summary>
    
    
      <category term="JavaScript, Node.js" scheme="http://yunzhexu.github.io/tags/JavaScript-Node-js/"/>
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="http://yunzhexu.github.io/2017/09/25/About-Me/"/>
    <id>http://yunzhexu.github.io/2017/09/25/About-Me/</id>
    <published>2017-09-25T05:57:56.000Z</published>
    <updated>2017-11-14T03:56:22.517Z</updated>
    
    <content type="html"><![CDATA[<style>.polaroid {  width: 150px;  height: 150px;  border-radius:8px;  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);}</style><p><br></p><p><img src="https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d?auto=format&amp;fit=crop&amp;w=1352&amp;q=60&amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3Ds" alt=""></p><font size="10">Hi,</font> I’m Yunzhe Xu, a graduate student studying at Stevens Institute of Technology, in the greater New York area.<br><br>I like programing, learning new technology is my passion. I want to be a web developing superhero and create awesome web applications in the future!<br><a id="more"></a><br><center><h2><font color="#939E98"> What I know </font></h2></center><br><br><div class="note primary"><h3 id="Front-end"><a href="#Front-end" class="headerlink" title="Front-end"></a>Front-end</h3><p><em>HTML, CSS, JavaScript, ES6, Bootstrap, React</em>  </p></div><br><br><div class="note info"><h3 id="Back-end"><a href="#Back-end" class="headerlink" title="Back-end"></a>Back-end</h3><p><em>NodeJS, APIs, NoSQL, Java, SQL</em>  </p></div><br><br><div class="note success"><h3 id="App"><a href="#App" class="headerlink" title="App"></a>App</h3><p><em>Android Development</em>  </p></div><br><br><div class="note warning"><h3 id="Data-Analysis"><a href="#Data-Analysis" class="headerlink" title="Data Analysis"></a>Data Analysis</h3><p><em>Python</em>  </p></div><br><br><div class="note danger"><h3 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h3><p><em>Unity</em>  </p></div><br><br><center><h2><font color="#939E98">  What I am learning and want to learn </font></h2></center><br><br><div class="note default"><p><em>Angular2, Typescript, Vue, React Native, Electron, Swift</em>  </p></div><br><br><center><h2><font color="#A17268"> My Works </font></h2></center><br><br><font color="grey"><em>click the icon to see the live demo</em></font><left><h3><font color="C7BDB4"> React App </font></h3></left><p><a href="https://react-app-pokedex.herokuapp.com/" target="_blank" rel="external"><center><img class="polaroid" src="https://image.flaticon.com/icons/svg/361/361998.svg" alt="Pokedex"></center></a></p><center><font color="#66ccff">Pokedex</font></center><p><br><br>I am writing some articles about what I learned in my blog. One for summarizing knowledge, another for sharing ideas.</p><p>By the way, I am actively seeking for an internship or full time job recently. Feel free to contact me. Just send an email to <font color="#66ccff">xuyunzhe0607@gmail.com </font></p>]]></content>
    
    <summary type="html">
    
      &lt;style&gt;
.polaroid {
  width: 150px;
  height: 150px;
  border-radius:8px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}
&lt;/style&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d?auto=format&amp;amp;fit=crop&amp;amp;w=1352&amp;amp;q=60&amp;amp;ixid=dW5zcGxhc2guY29tOzs7Ozs%3Ds&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;font size=&quot;10&quot;&gt;Hi,&lt;/font&gt; I’m Yunzhe Xu, a graduate student studying at Stevens Institute of Technology, in the greater New York area.&lt;br&gt;&lt;br&gt;I like programing, learning new technology is my passion. I want to be a web developing superhero and create awesome web applications in the future!&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
